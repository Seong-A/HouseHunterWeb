<!DOCTYPE html>
<html lang="ko">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>HouseHunter</title>
    <link rel="stylesheet" href="/stylesheets/map.css">
    <script>
        function loadHeader() {
            fetch('/header') 
                .then(response => response.text())
                .then(data => {
                    document.getElementById('header-container').innerHTML = data;
                    document.querySelector('.login-button').addEventListener('click', function() {
                        checkLogin(); 
                    });
                    updateUI();
                })
                .catch(error => console.error('Error:', error));
        }
        
        window.onload = function() {
            loadHeader();
            loadAllMarkers();
            registerRoomtypesHandlers();
            registerDepositFilterHandlers();
            registerMonthlyFilterHandlers();
            registerManagementFilterHandlers();

        };

        async function checkLogin() {
            try {
                const response = await fetch('/check-login');
                const data = await response.json();

                if (data.isLoggedIn) {
                    window.location.href = '/mypage';
                } else {
                    window.location.href = '/login';
                }
            } catch (error) {
                console.error('Error:', error);
            }
        }

        async function updateUI() {
            try {
                const response = await fetch('/check-login');
                const userData = await response.json();
                const userNameDisplay = document.querySelector('.user-name');

                if (userData.isLoggedIn) {
                    const loginButton = document.querySelector('.login-button');
                    loginButton.style.display = 'none'; 
                    userNameDisplay.textContent = userData.userName; 
                    userNameDisplay.style.display = 'inline-block';
                } else {
                    userNameDisplay.style.display = 'none'; 
                }
            } catch (error) {
                console.error('Error:', error);
            }
        }

        async function loadAllMarkers() {
            try {
                const allLocationsData = await getAllMarkers();
                displayMarkers(allLocationsData);
            } catch (error) {
                console.error('Error:', error);
            }
        }

        async function displayMarkers(locationsData) {
            try {
                removeAllMarkers();

                // 지도의 중심 좌표
                const firstLocation = locationsData[0];
                const mapCenter = new naver.maps.LatLng(firstLocation.latitude, firstLocation.longitude);

                // 지도를 생성
                const map = new naver.maps.Map(mapDiv, {
                    center: mapCenter,
                    zoom: 13 
                });

                locationsData.forEach(location => {
                    const markerPosition = new naver.maps.LatLng(location.latitude, location.longitude);
                    const marker = new naver.maps.Marker({
                        position: markerPosition,
                        map: map 
                    });
                    marker.id = location.id;
                    markers.push(marker);

                    naver.maps.Event.addListener(marker, 'click', function() {
                        window.location.href = `/roomdetail?id=${marker.id}`;
                    });
                });
            } catch (error) {
                console.error('Error:', error);
            }
        }

        async function getAllMarkers() {
            try {
                const response = await fetch('/get-all-markers');
                const locationsData = await response.json();
                return locationsData;
            } catch (error) {
                console.error('Error:', error);
            }
        }

        let selectedRoomTypes = [];
        let depositValue = null;
        let monthlyValue = null;
        let managementValue = null;

        // 방유형 필터
        function registerRoomtypesHandlers() {
            document.querySelector('.roomfilter').addEventListener('click', function() {
                toggleFilter('.filter-content.roomfilter-content', '#applyRoomTypesButton');
            });

            document.getElementById('applyRoomTypesButton').addEventListener('click', function() {
                selectedRoomTypes = Array.from(document.querySelectorAll('.roomfilter-content input[type="checkbox"]:checked')).map(checkbox => checkbox.value);
                applyFilters();
            });
        }

        let markers = [];

        function removeAllMarkers() {
            markers.forEach(marker => {
                marker.setMap(null);
            });

            markers = [];
        }

        // 보증금 필터
        function registerDepositFilterHandlers() {
            document.querySelector('.depositfilter').addEventListener('click', function() {
                toggleFilter('.filter-content.depositfilter-content', '#applyDepositButton');
            });

            document.getElementById('applyDepositButton').addEventListener('click', function() {
                depositValue = parseInt(document.getElementById('depositInput').value.replace(/[^0-9]/g, ''));
                applyFilters();
            });

            document.getElementById('depositInput').addEventListener('input', function() {
                applyFilters();
            });
        }

        // 월세 필터
        function registerMonthlyFilterHandlers() {
            document.querySelector('.monthlyfilter').addEventListener('click', function() {
                toggleFilter('.filter-content.monthlyfilter-content', '#applyMonthlyButton');
            });

            document.getElementById('applyMonthlyButton').addEventListener('click', function() {
                monthlyValue = parseInt(document.getElementById('monthlyInput').value.replace(/[^0-9]/g, ''));
                applyFilters();
            });

            document.getElementById('monthlyInput').addEventListener('input', function() {
                applyFilters();
            });
        }

        // 관리비 필터
        function registerManagementFilterHandlers() {
            document.querySelector('.managementfilter').addEventListener('click', function() {
                toggleFilter('.filter-content.managementfilter-content', '#applyManagementButton');
            });

            document.getElementById('applyManagementButton').addEventListener('click', function() {
                managementValue = parseInt(document.getElementById('managementInput').value.replace(/[^0-9]/g, ''));
                applyFilters();
            });

            document.getElementById('managementInput').addEventListener('input', function() {
                applyFilters();
            });
        }

        // 필터 선택하면 항목 나타나기
        function toggleFilter(contentSelector, applyButtonSelector) {
            const filterContent = document.querySelector(contentSelector);
            const applyButton = document.querySelector(applyButtonSelector);

            if (filterContent.style.display === 'none') {
                filterContent.style.display = 'block';
                applyButton.style.display = 'block';
            } else {
                filterContent.style.display = 'none';
                applyButton.style.display = 'none';
            }
        }

        // 필터 적용
        async function applyFilters() {
            try {
                const filterCondition = {
                    roomTypes: selectedRoomTypes.join(','),
                    deposit: depositValue,
                    monthly: monthlyValue,
                    management: managementValue
                };

                const locationsData = await getFilteredMarkers(filterCondition);

                displayMarkers(locationsData);
            } catch (error) {
                console.error('에러 :', error);
            }
        }

        async function getFilteredMarkers(filterCondition) {
            try {
                const response = await fetch('/get-filtered-markers', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(filterCondition)
                });
                const locationsData = await response.json();
                return locationsData;
            } catch (error) {
                console.error('Error:', error);
            }
        }

    </script>
</head>
<body>
    <div id="header-container"></div>
    <div class="container">
        <h1>🔎 원하는 조건으로 방 구하기</h1>
        <div class="filter-container">
            <div class="filter">
                <button class="roomfilter">
                    <p id="roomtype">방유형</p>
                </button>
                <div class="filter-content roomfilter-content">
                    <label><input type="checkbox" value="원룸">원룸</label>
                    <label><input type="checkbox" value="투ㆍ쓰리룸">투ㆍ쓰리룸</label>
                    <label><input type="checkbox" value="오피스텔">오피스텔</label>
                    <label><input type="checkbox" value="아파트">아파트</label>
                </div>
                <button class="applyRoomTypesButton" id="applyRoomTypesButton">적용하기</button>
            </div>
           
            <div class="filter">
                <button class="depositfilter">
                    <p id="deposittype">보증금</p>
                </button>
                <div class="filter-content depositfilter-content">
                    <input type="text" id="depositInput" placeholder="보증금을 입력하세요">
                </div>
                <button id="applyDepositButton">적용하기</button>
            </div>

            <div class="filter">
                <button class="monthlyfilter">
                    <p id="monthlytype">월세</p>
                </button>
                <div class="filter-content monthlyfilter-content">
                    <input type="text" id="monthlyInput" placeholder="월세를 입력하세요">
                </div>
                <button id="applyMonthlyButton">적용하기</button>
            </div>

            <div class="filter">
                <button class="managementfilter">
                    <p id="managementtype">관리비</p>
                </button>
                <div class="filter-content managementfilter-content">
                    <input type="text" id="managementInput" placeholder="관리비를 입력하세요">
                </div>
                <button id="applyManagementButton">적용하기</button>
            </div>


        </div>
        <div id="selectedRoomTypes"></div>
        <section class="section" id="section">
            <div class="map" id="map"></div>
            <code id="snippet" class="snippet"></code>
        </section>
    </div>

    <script type="text/javascript" src="https://openapi.map.naver.com/openapi/v3/maps.js?ncpClientId=<%= naverMapAPIClientID %>"></script>
    <script>
        var mapDiv = document.getElementById('map');
        var map = new naver.maps.Map(mapDiv);
    </script>
</body>
</html>
